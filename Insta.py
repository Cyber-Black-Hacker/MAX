

import base64
exec(base64.b64decode('aW1wb3J0IG9zLHJlLHN5cyxqc29uLHRpbWUscmFuZG9tLHJlcXVlc3RzCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IKZnJvbSByZXF1ZXN0cy5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3IKZnJvbSByZXF1ZXN0cyBpbXBvcnQgUmVxdWVzdCwgU2Vzc2lvbgpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgpsb29wID0gMApvayA9IFtdCmNwID0gW10KCiMgQ29sb3VyCkggPSAoJ1x4MWJbMTs5MG0nKQpNID0gKCdceDFiWzE7OTFtJykKSCA9ICgnXHgxYlsxOzkybScpCksgPSAoJ1x4MWJbMTs5M20nKQpUID0gKCdceDFiWzE7OTRtJykKVSA9ICgnXHgxYlsxOzk1bScpCkIgPSAoJ1x4MWJbMTs5Nm0nKQpQID0gKCdceDFiWzE7OTdtJykKCiMgTG9nbwpfX19sb2dvX19fID0gKCIiIiVzICAgICAgIENyZWF0ZWQgYnkgOiBBcnlhbi1NZmMKJXMgX19fIF9fXyBfX18gX18gIF9fIF9fXyBfICAgXyBfXyAgX18KJXN8IF8gXCBfIFwgX198ICBcLyAgfF8gX3wgfCB8IHwgIFwvICB8CiVzfCAgXy8gICAvIF98fCB8XC98IHx8IHx8IHxffCB8IHxcL3wgfAolc3xffCB8X3xfXF9fX3xffCAgfF98X19ffFxfX18vfF98ICB8X3wiIiIlKFAsQixCLEgsSCkpCiMgUHJveHkKdHJ5OgogICAgX19yZXMgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vYXBpLnByb3h5c2NyYXBlLmNvbS92Mi8/cmVxdWVzdD1kaXNwbGF5cHJveGllcyZwcm90b2NvbD1zb2NrczQmdGltZW91dD0xMDAwMCZjb3VudHJ5PWFsbCZzc2w9YWxsJmFub255bWl0eT1hbGwnKS50ZXh0CiAgICBvcGVuKCdEYXRhL3Byb3h5LnR4dCcsJ3cnKS53cml0ZShfX3JlcykKZXhjZXB0OgogICAgX19zZXAgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9Bcnlhbi1NZmMvTUFYL21haW4vRGF0YS9wcm94eTMudHh0JykudGV4dAogICAgb3BlbignRGF0YS9wcm94eS50eHQnLCd3Jykud3JpdGUoX19zZXApCiMgUmVxdWVzdHMgU2Vzc2lvbgpzZXMgPSBTZXNzaW9uKCkKIyBMb2dpbiBDb29raWUKZGVmIF9fX2xvZ2luX19fKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIHByaW50KF9fX2xvZ29fX18pCiAgICBwcmludCgiXG4lc1slcyElc10lcyBZb3UgTXVzdCBFbnRlciBJbnN0YWdyYW0gQ29va2llcywgSXQncyBCZXR0ZXIgVG8gVXNlIEEgU2FjcmlmaWNpYWwgQWNjb3VudCBUbyBMb2dpbiwgSWYgWW91IERvbid0IEtub3cgSG93IFRvIEdldCBDb29raWVzIFR5cGUge29wZW59LCBKb2luIFJlZCBIYWNrZXJzIEFybXkgb3IgU2VuZCBtZXNzYWdlIG9uIFdoYXRzQXBwICs5MTczNTYyNjg4MTgge09wZW59XG4iJShNLEgsTSxIKSkKICAgIHRyeToKICAgICAgICBfX19jb29raWVfX18gPSBpbnB1dCgiJXNbJXM/JXNdJXMgQ29va2llIDolcyAiJShCLFAsQixQLEspKQogICAgICAgIGlmIF9fX2Nvb2tpZV9fXyBpbiBbJ29wZW4nLCdPcGVuJ106CiAgICAgICAgICAgIHByaW50KCIlc1slcyElc10lcyBZb3UgV2lsbCBCZSBSZWRpcmVjdGVkIFRvIFdoYXRzYXBwIiUoTSxILE0sSCkpCiAgICAgICAgICAgIG9zLnN5c3RlbSgieGRnLW9wZW4gaHR0cHM6Ly9jaGF0LndoYXRzYXBwLmNvbS9HeUJiQVJrcG9sdDNMRExKM3dpUkFnIik7ZXhpdCgpCiAgICAgICAgX19faGVhZCA9IHsndXNlci1hZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4wOyBMZW5vdm8gSzMzYjM2IEJ1aWxkL05SRDkwTjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS82NS4wLjMzMjUuMTA5IE1vYmlsZSBTYWZhcmkvNTM3LjM2IEluc3RhZ3JhbSA0MS4wLjAuMTMuOTIgQW5kcm9pZCAoMjQvNy4wOyA0ODBkcGk7IDEwODB4MTkyMDsgTEVOT1ZPL0xlbm92bzsgTGVub3ZvIEszM2IzNjsgSzMzYjM2OyBxY29tOyBwdF9CUjsgMTAzNTE2NjY2KScsJ2Nvb2tpZSc6IF9fX2Nvb2tpZV9fX30KICAgICAgICBfX192cHMgPSBfX19jb29raWVfX18uc3BsaXQoJ2RzX3VzZXJfaWQ9JylbMV07X19fdXNlcl9fXyA9IF9fX3Zwcy5zcGxpdCgnOycpWzBdCiAgICAgICAgb3BlbignRGF0YS91c2VyLnR4dCcsJ3cnKS53cml0ZShfX191c2VyX19fKQogICAgICAgIF9fZ2V0ID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvdXNlcnMvJytfX191c2VyX19fKycvaW5mby8nLCBoZWFkZXJzPV9fX2hlYWQpLmpzb24oKVsndXNlciddCiAgICAgICAgb3Blbigna3VraS50eHQnLCd3Jykud3JpdGUoX19fY29va2llX19fKQogICAgICAgIHByaW50KCIlc1slcyolc10lcyBXZWxjb21lIDolcyAlcyIlKEIsUCxCLFAsSCxfX2dldFsnZnVsbF9uYW1lJ10pKQogICAgICAgIF9fX2Nvb2tpZXNfX18oKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgQ29va2llIEludmFsaWQiJShQLE0sUCxNKSkKICAgIGV4Y2VwdCAoVmFsdWVFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgSW5zdGFncmFtIENvb2tpZXMgQ2FuJ3QgQmUgVXNlZCBQbGVhc2UgUmVwbGFjZSBXaXRoIEFub3RoZXIgQWNjb3VudCIlKFAsTSxQLE0pKQogICAgZXhjZXB0IChJbmRleEVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBDb29raWUgRXJyb3IgTWlzc2luZyB7ZHNfdXNlcl9pZD19IiUoUCxNLFAsTSkpCiAgICBleGNlcHQgKENvbm5lY3Rpb25FcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgQ29ubmVjdGlvbiBFcnJvciIlKFAsSyxQLEspKQojIEhlYWRlcnMKZGVmIF9fX2hlYWRlcl9fXygpOgogICAgdHJ5OgogICAgICAgIF9fX2hlYWQgPXsndXNlci1hZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IEhEMTkwNyBCdWlsZC9RS1ExLjE5MDcxNi4wMDM7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNzguMC4zOTA0Ljk2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IEluc3RhZ3JhbSAxMTkuMC4wLjMzLjE0NyBBbmRyb2lkICgyOS8xMDsgNDIwZHBpOyAxMDgweDIyOTE7IE9uZVBsdXM7IEhEMTkwNzsgT25lUGx1czdUVE1POyBxY29tOyBlbl9VUzsgMTgyNzQ3Mzk3KScsJ2Nvb2tpZSc6IG9wZW4oJ2t1a2kudHh0JywncicpLnJlYWQoKX0KICAgIGV4Y2VwdCAoSU9FcnJvcik6CiAgICAgICAgcHJpbnQoIiVzWyVzISVzXSVzIENvb2tpZSBJbnZhbGlkIiUoUCxNLFAsTSkpO3NsZWVwKDIpO19fX2xvZ2luX19fKCkKICAgIHJldHVybiBfX19oZWFkCiMgQ2VrIENvb2tpZQpkZWYgX19fY29va2llc19fXygpOgogICAgdHJ5OgogICAgICAgIF9fX2Nvb2tpZV9fXyA9IG9wZW4oJ2t1a2kudHh0JywncicpLnJlYWQoKQogICAgZXhjZXB0IChJT0Vycm9yKToKICAgICAgICBwcmludCgiJXNbJXMhJXNdJXMgQ29va2llIEludmFsaWQiJShQLE0sUCxNKSk7c2xlZXAoMikKICAgICAgICBfX19sb2dpbl9fXygpCiAgICB0cnk6CiAgICAgICAgX19fY29rID0gX19fY29va2llX19fLnNwbGl0KCdzZXNzaW9uaWQ9JylbMV07IF9fX2t1a2kgPSBfX19jb2suc3BsaXQoJzsnKVswXQogICAgICAgIF9fX3Rla3MgPSByYW5kb20uY2hvaWNlKFsnSGVsbG8gQmFuZyDwn5iNJywnSGkgQmFuZyBIb3cgYXJlIHlvdSAnLCdQZXJtaXNzaW9uIHRvIHVzZSB0aGUgc2NyaXB0ICcsJ0dyZWF0IEJhbmcgJywnUHJvZ3JhbW1lciBCYW5nICcsJ0dyZWV0aW5ncyB0byBrbm93IEJhbmcnXSkKICAgICAgICBfX19faGVhZCA9IHsnYWNjZXB0JzogJyovKicsJ2FjY2VwdC1lbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlLCBicicsJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsJ2NvbnRlbnQtbGVuZ3RoJzogJzAnLCdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywnY29va2llJzogJ2lnX2RpZD1GODM5RDkwMC01RUNDLTQzOTItQkNBRC01Q0JENTFGQjkyMjg7IG1pZD1ZQ2hseVFBTEFBSHAyUE9PcDJsS18tY2lBR2xNOyBpZ19ucmNiPTE7IGNzcmZ0b2tlbj1XNGZzWm1DalVqRm1zNlhtS2wxT0FqZzh2ODFqWnQzcjsgZHNfdXNlcl9pZD00NTg3MjAzNDk5Nzsgc2Vzc2lvbmlkPScrX19fa3VraSwnb3JpZ2luJzogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20nLCdyZWZlcmVyJzogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJywnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLCdzZWMtZmV0Y2gtbW9kZSc6ICdjb3JzJywnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLCd1c2VyLWFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTgyIFNhZmFyaS81MzcuMzYnLCd4LWNzcmZ0b2tlbic6ICdXNGZzWm1DalVqRm1zNlhtS2wxT0FqZzh2ODFqWnQzcicsJ3gtaWctYXBwLWlkJzogJzUzOTgyMTgwODMnLCd4LWlnLXd3dy1jbGFpbSc6ICdobWFjLkFSME9RWTRHdzRrY3pXTnZmVk9odm9salNJTnFCMnUyZ0ItdXRVUTFNRjBNa3J6dScsJ3gtaW5zdGFncmFtLWFqYXgnOiAnOTViZmVmNWRkODE2JywneC1yZXF1ZXN0ZWQtd2l0aCc6ICdYTUxIdHRwUmVxdWVzdCd9CiAgICAgICAgX19fZGF0YSA9IHsnY29tbWVudF90ZXh0JzogX19fdGVrcywncmVwbGllZF90b19jb21tZW50X2lkJzonJ30KICAgICAgICBfX19yZXggPSBzZXMucG9zdCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS93ZWIvbGlrZXMvMjczNDMxNzIwNTExNTM4MjYyOS9saWtlLycsaGVhZGVycz1fX19faGVhZCkudGV4dAogICAgICAgIF9fX3JleDIgPSBzZXMucG9zdCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS93ZWIvZnJpZW5kc2hpcHMvNTM5ODIxODA4My9mb2xsb3cvJyxoZWFkZXJzPV9fX19oZWFkKS50ZXh0ICMgSmFuZ2FuIERpIFViYWghCiAgICAgICAgX19fcmV4MyA9IHNlcy5wb3N0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dlYi9jb21tZW50cy8yNzM0MzE3MjA1MTE1MzgyNjI5L2FkZC8nLGhlYWRlcnM9X19fX2hlYWQsZGF0YT1fX19kYXRhKS50ZXh0CiAgICAgICAgaWYgJyJzdGF0dXMiOiJvayInIGluIHN0cihfX19yZXgpOgogICAgICAgICAgICBwcmludCgiJXNbJXMqJXNdJXMgTG9naW4gU3VjY2Vzc2Z1bGwiJShQLEgsUCxIKSk7c2xlZXAoMikKICAgICAgICAgICAgX19fbWVudV9fXygpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIiVzWyVzISVzXSVzIENvb2tpZSBJbnZhbGlkIiUoUCxNLFAsTSkpO3NsZWVwKDIpCiAgICAgICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIGt1a2kudHh0Jyk7X19fbG9naW5fX18oKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYga3VraS50eHQnKTtleGl0KCIlc1slcyElc10lcyBDb29raWUgRXJyb3IiJShQLE0sUCxNKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBLb25la3NpIEVycm9yIiUoUCxLLFAsSykpCiMgRGFmdGFyIE1lbnUKZGVmIF9fX21lbnVfX18oKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQoX19fbG9nb19fXykKICAgIHRyeToKICAgICAgICBfX19jb29raWVfX18gPSBvcGVuKCdrdWtpLnR4dCcsJ3InKS5yZWFkKCkKICAgIGV4Y2VwdCAoSU9FcnJvcik6CiAgICAgICAgcHJpbnQoIlxuJXNbJXMhJXNdJXMgQ29va2llIEludmFsaWQiJShQLE0sUCxNKSk7c2xlZXAoMikKICAgICAgICBfX19sb2dpbl9fXygpCiAgICB0cnk6CiAgICAgICAgX19faGVhZCA9IHsndXNlci1hZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNy4wOyBMZW5vdm8gSzMzYjM2IEJ1aWxkL05SRDkwTjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS82NS4wLjMzMjUuMTA5IE1vYmlsZSBTYWZhcmkvNTM3LjM2IEluc3RhZ3JhbSA0MS4wLjAuMTMuOTIgQW5kcm9pZCAoMjQvNy4wOyA0ODBkcGk7IDEwODB4MTkyMDsgTEVOT1ZPL0xlbm92bzsgTGVub3ZvIEszM2IzNjsgSzMzYjM2OyBxY29tOyBwdF9CUjsgMTAzNTE2NjY2KScsJ2Nvb2tpZSc6IF9fX2Nvb2tpZV9fX30KICAgICAgICBfX2luZiA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL3VzZXJzLycrb3BlbignRGF0YS91c2VyLnR4dCcsJ3InKS5yZWFkKCkrJy9pbmZvLycsIGhlYWRlcnM9X19faGVhZCkuanNvbigpWyd1c2VyJ10KICAgICAgICBwcmludCgiJXNbJXM+JXNdJXPigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQiJShLLFAsSyxQKSkKICAgICAgICBwcmludCgiJXNbJXPigKIlc10lcyBXZWxjb21lIDolcyAlcyIlKEgsUCxILFAsSyxfX2luZlsnZnVsbF9uYW1lJ10pKQogICAgICAgIHByaW50KCIlc1slc+KAoiVzXSVzIFVzZXIgOiVzICVzIiUoSCxQLEgsUCxLLG9wZW4oJ0RhdGEvdXNlci50eHQnLCdyJykucmVhZCgpKSkKICAgICAgICBwcmludCgiJXNbJXPigKIlc10lcyBGb2xsb3dlciA6JXMgJXMiJShILFAsSCxQLEssX19pbmZbJ2ZvbGxvd2VyX2NvdW50J10pKQogICAgICAgIHByaW50KCIlc1slcz4lc10lc+KAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlFxuIiUoSyxQLEssUCkpCiAgICBleGNlcHQgKEtleUVycm9yKToKICAgICAgICBwcmludCgiJXNbJXMhJXNdJXMgQ29va2llIEludmFsaWQiJShQLE0sUCxNKSkKICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBrdWtpLnR4dCcpO3NsZWVwKDIpCiAgICAgICAgX19fbG9naW5fX18oKQogICAgZXhjZXB0IChDb25uZWN0aW9uRXJyb3IpOgogICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIEtvbmVrc2kgRXJyb3IiJShQLEssUCxLKSkKICAgIHByaW50KCIlc1slczElc10lcyBEdW1wIFVzZXJuYW1lIEZyb20gRm9sbG93aW5nIiUoQixQLEIsUCkpCiAgICBwcmludCgiJXNbJXMyJXNdJXMgRHVtcCBVc2VybmFtZSBPZiBGb2xsb3dlcnMiJShCLFAsQixQKSkKICAgIHByaW50KCIlc1slczMlc10lcyBEdW1wIFVzZXJuYW1lIEZyb20gSG9tZSIlKEIsUCxCLFApKQogICAgcHJpbnQoIiVzWyVzNCVzXSVzIER1bXAgVXNlcm5hbWUgRnJvbSBIYXN0YWciJShCLFAsQixQKSkKICAgIHByaW50KCIlc1slczUlc10lcyBEdW1wIFVzZXJuYW1lIEZyb20gU2VhcmNoIiUoQixQLEIsUCkpCiAgICBwcmludCgiJXNbJXM2JXNdJXMgRHVtcCBVc2VybmFtZSBGcm9tIFF1ZXJ5IiUoQixQLEIsUCkpCiAgICBwcmludCgiJXNbJXM3JXNdJXMgRHVtcCBVc2VyIEZyb20gRW1haWwiJShCLFAsQixQKSkKICAgIHByaW50KCIlc1slczglc10lcyBDcmFjayBTdGFydCAlc3slc0Zhc3Qlc30iJShCLEgsQixILEIsSyxCKSkKICAgIHByaW50KCIlc1slczklc10lcyBWaWV3IENyYWNrIFJlc3VsdHMiJShCLFAsQixQKSkKICAgIHByaW50KCIlc1slc0Elc10lcyBIb3cgVG8gVXNlIiUoQixQLEIsUCkpCiAgICBwcmludCgiJXNbJXMwJXNdJXMgRGVsZXRlIENvb2tpZXNcbiIlKEIsUCxCLFApKQogICAgX19fbWVudV9fXyA9IGlucHV0KCIlc1slcz8lc10lcyBDaG9vc2UgOiVzICIlKEgsUCxILFAsSykpCiAgICBpZiBfX19tZW51X19fIGluIFsnMScsJzAxJ106CiAgICAgICAgX19fbWVuZ2lrdXRpX19fKCkKICAgIGVsaWYgX19fbWVudV9fXyBpbiBbJzInLCcwMiddOgogICAgICAgIF9fX3Blbmdpa3V0X19fKCkKICAgIGVsaWYgX19fbWVudV9fXyBpbiBbJzMnLCcwMyddOgogICAgICAgIF9fX2JlcmFuZGFfX18oKQogICAgZWxpZiBfX19tZW51X19fIGluIFsnNCcsJzA0J106CiAgICAgICAgX19faGFzdGFnX19fKCkKICAgIGVsaWYgX19fbWVudV9fXyBpbiBbJzUnLCcwNSddOgogICAgICAgIF9fX3NlYXJjaF9fXygpCiAgICBlbGlmIF9fX21lbnVfX18gaW4gWyc2JywnMDYnXToKICAgICAgICBfX19xdWVyeV9fXygpCiAgICBlbGlmIF9fX21lbnVfX18gaW4gWyc3JywnMDcnXToKICAgICAgICBfX19lbWFpbF9fXygpCiAgICBlbGlmIF9fX21lbnVfX18gaW4gWyc4JywnMDgnXToKICAgICAgIF9fX3Bhc3N3b3JkX19fKCkKICAgIGVsaWYgX19fbWVudV9fXyBpbiBbJzknLCcwOSddOgogICAgICAgIHByaW50KCJcbiVzWyVzMSVzXSVzIFZpZXcgUmVzdWx0cy9Pay50eHQiJShCLFAsQixQKSkKICAgICAgICBwcmludCgiJXNbJXMyJXNdJXMgVmlldyBSZXN1bHRzL0NwLnR4dCIlKEIsUCxCLFApKQogICAgICAgIHByaW50KCIlc1slczAlc10lcyBFeGl0ICVzeyVzRXhpdCVzfSIlKEIsUCxCLFAsQixILEIpKQogICAgICAgIF9fX2hhc2lsX19fID0gaW5wdXQoIlxuJXNbJXM/JXNdJXMgQ2hvb3NlIDolcyAiJShILFAsSCxQLEspKQogICAgICAgIGlmIF9fX2hhc2lsX19fIGluIFsnMScsJzAxJ106CiAgICAgICAgICAgIG9zLnN5c3RlbSgnY2F0IFJlc3VsdHMvT2sudHh0JykKICAgICAgICAgICAgZXhpdCgiXG4iKQogICAgICAgIGVsaWYgX19faGFzaWxfX18gaW4gWycyJywnMDInXToKICAgICAgICAgICAgb3Muc3lzdGVtKCdjYXQgUmVzdWx0cy9DcC50eHQnKQogICAgICAgICAgICBleGl0KCJcbiIpCiAgICAgICAgZWxpZiBfX19oYXNpbF9fXyBpbiBbJzAnLCcwMCddOgogICAgICAgICAgICBleGl0KCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBleGl0KCIlc1slcyElc10lcyBXcm9uZyBJbnB1dCIlKFAsTSxQLE0pKQogICAgZWxpZiBfX19tZW51X19fIGluIFsnYScsJ0EnXToKICAgICAgICBwcmludCgiXG4lc1slcyElc10lcyBZb3UgV2lsbCBCZSBSZWRpcmVjdGVkIFRvIEZhY2Vib29rIE9yIEJyb3dzZXIhIiUoTSxILE0sSCkpCiAgICAgICAgb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL2NoYXQud2hhdHNhcHAuY29tL0d5QmJBUmtwb2x0M0xETEozd2lSQWciKTtleGl0KCkKICAgICAgICBleGl0KCIlc1slcz8lc10lcyBUeXBlIHtweXRob24gSW5zdGEucHl9IiUoUCxILFAsSCkpCiAgICBlbGlmIF9fX21lbnVfX18gaW4gWycwJywnMDAnXToKICAgICAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBrdWtpLnR4dCcpCiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgRGVsZXRpbmcgQ29va2llLi4uIiUoUCxLLFAsSykpCiAgICBlbHNlOgogICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIFdyb25nIElucHV0IiUoUCxNLFAsTSkpCiMgRHVtcCBNZW5naWt1dGkKZGVmIF9fX21lbmdpa3V0aV9fXygpOgogICAgZ2xvYmFsIF9fX2hlYWRlcl9fXyxzZXMKICAgIHRyeToKICAgICAgICBfX19oZWFkID0gX19faGVhZGVyX19fKCkKICAgICAgICBfX191c2VyX19fID0gaW5wdXQoIlxuJXNbJXM/JXNdJXMgVXNlciA6JXMgIiUoQixQLEIsUCxIKSkKICAgICAgICBpZiBfX191c2VyX19fIGluIFsnJywnICddOgogICAgICAgICAgICBleGl0KCIlc1slcyElc10lcyBEb24ndCBFbXB0eSIlKFAsTSxQLE0pKQogICAgICAgIF9fcmVzID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycrX19fdXNlcl9fXysnLz9fX2E9MScsIGhlYWRlcnM9X19faGVhZCkuanNvbigpWydncmFwaHFsJ11bJ3VzZXInXQogICAgICAgIF9fX25hbWEgPSBfX3Jlc1snZnVsbF9uYW1lJ10ucmVwbGFjZSgnICcsJ18nKSArICcudHh0JwogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBOYW1lIDolcyAlcyIlKEIsUCxCLFAsSCxfX3Jlc1snZnVsbF9uYW1lJ10pKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBGb2xsb3dpbmcgOiVzICVzIiUoQixQLEIsUCxILF9fcmVzWydlZGdlX2ZvbGxvdyddWydjb3VudCddKSkKICAgICAgICBwcmludCgiJXMgICAiJShQKSkKICAgIGV4Y2VwdCAoS2V5RXJyb3IpOgogICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIFVzZXIgTm90IEZvdW5kIiUoUCxNLFAsTSkpCiAgICB0cnk6CiAgICAgICAgX19zZXAgPSBzZXMuZ2V0KCdodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvZnJpZW5kc2hpcHMvJytfX3Jlc1snaWQnXSsnL2ZvbGxvd2luZy8/Y291bnQ9NTAwMCcsIGhlYWRlcnM9X19faGVhZCkKICAgICAgICBfX19maWxlID0gb3BlbignRHVtcC8nK19fX25hbWEsICd3JykKICAgICAgICBmb3IgeiBpbiBqc29uLmxvYWRzKF9fc2VwLnRleHQpWyJ1c2VycyJdOgogICAgICAgICAgICBfX19maWxlLndyaXRlKHpbJ3VzZXJuYW1lJ10rJzw9PicrelsnZnVsbF9uYW1lJ10rJyAgXG4nKQogICAgICAgICAgICBwcmludCgiXHIiK3pbJ3VzZXJuYW1lJ10rIjw9PiIrelsnZnVsbF9uYW1lJ10pCiAgICAgICAgX19fZmlsZS5jbG9zZSgpCiAgICAgICAgcHJpbnQoIlxyJXMgICAgICAgICAgICAgICAgICAgIiUoUCkpCiAgICAgICAgcHJpbnQoIiVzWyVzKiVzXSVzIERvbmUuLi4iJShILFAsSCxQKSkKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgVG90YWwgVXNlciA6JXMgJXMiJShILFAsSCxQLEssbGVuKG9wZW4oJ0R1bXAvJytfX19uYW1hLCdyJykucmVhZGxpbmVzKCkpKSkKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgRmlsZSBTYXZlZCBJbiA6JXMgRHVtcC8lcyIlKEgsUCxILFAsSyxfX19uYW1hKSkKICAgICAgICBpbnB1dCgiJXNbJXNCYWNrJXNdIiUoSyxQLEspKTtfX19tZW51X19fKCkKICAgIGV4Y2VwdCAoS2V5RXJyb3IpOgogICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIER1bXAgRmFpbGVkIiUoUCxNLFAsTSkpCiAgICBleGNlcHQgKENvbm5lY3Rpb25FcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgQ29ubmVjdGlvbiBFcnJvciIlKFAsSyxQLEspKQojIER1bXAgUGVuZ2lrdXQKZGVmIF9fX3Blbmdpa3V0X19fKCk6CiAgICBnbG9iYWwgX19faGVhZGVyX19fLHNlcwogICAgdHJ5OgogICAgICAgIF9fX2hlYWQgPSBfX19oZWFkZXJfX18oKQogICAgICAgIF9fX3VzZXJfX18gPSBpbnB1dCgiXG4lc1slcz8lc10lcyBVc2VyIDolcyAiJShCLFAsQixQLEgpKQogICAgICAgIGlmIF9fX3VzZXJfX18gaW4gWycnLCcgJ106CiAgICAgICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIEphbmdhbiBLb3NvbmciJShQLE0sUCxNKSkKICAgICAgICBfX3JlcyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nK19fX3VzZXJfX18rJy8/X19hPTEnLCBoZWFkZXJzPV9fX2hlYWQpLmpzb24oKVsnZ3JhcGhxbCddWyd1c2VyJ10KICAgICAgICBfX19uYW1hID0gX19yZXNbJ2Z1bGxfbmFtZSddLnJlcGxhY2UoJyAnLCdfJykgKyAnLnR4dCcKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgTmFtZSA6JXMgJXMiJShCLFAsQixQLEgsX19yZXNbJ2Z1bGxfbmFtZSddKSkKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgRm9sbG93ZXJzIDolcyAlcyIlKEIsUCxCLFAsSCxfX3Jlc1snZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddKSkKICAgICAgICBwcmludCgiJXMgICAiJShQKSkKICAgIGV4Y2VwdCAoS2V5RXJyb3IpOgogICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIFVzZXIgTm90IEZvdW5kIiUoUCxNLFAsTSkpCiAgICB0cnk6CiAgICAgICAgX19zZXAgPSBzZXMuZ2V0KCdodHRwczovL2kuaW5zdGFncmFtLmNvbS9hcGkvdjEvZnJpZW5kc2hpcHMvJytfX3Jlc1snaWQnXSsnL2ZvbGxvd2Vycy8/Y291bnQ9NTAwMCcsIGhlYWRlcnM9X19faGVhZCkKICAgICAgICBfX19maWxlID0gb3BlbignRHVtcC8nK19fX25hbWEsICd3JykKICAgICAgICBmb3IgeiBpbiBqc29uLmxvYWRzKF9fc2VwLnRleHQpWyJ1c2VycyJdOgogICAgICAgICAgICBfX19maWxlLndyaXRlKHpbJ3VzZXJuYW1lJ10rJzw9PicrelsnZnVsbF9uYW1lJ10rJyAgXG4nKQogICAgICAgICAgICBwcmludCgiXHIiK3pbJ3VzZXJuYW1lJ10rIjw9PiIrelsnZnVsbF9uYW1lJ10pCiAgICAgICAgX19fZmlsZS5jbG9zZSgpCiAgICAgICAgcHJpbnQoIlxyJXMgICAgICAgICAgICAgICAgICAgIiUoUCkpCiAgICAgICAgcHJpbnQoIiVzWyVzKiVzXSVzIERvbmUuLi4iJShILFAsSCxQKSkKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgVG90YWwgVXNlciA6JXMgJXMiJShILFAsSCxQLEssbGVuKG9wZW4oJ0R1bXAvJytfX19uYW1hLCdyJykucmVhZGxpbmVzKCkpKSkKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgRmlsZSBTYXZlZCBJbiA6JXMgRHVtcC8lcyIlKEgsUCxILFAsSyxfX19uYW1hKSkKICAgICAgICBpbnB1dCgiJXNbJXNLZW1iYWxpJXNdIiUoSyxQLEspKTtfX19tZW51X19fKCkKICAgIGV4Y2VwdCAoS2V5RXJyb3IpOgogICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIER1bXAgRmFpbGVkIiUoUCxNLFAsTSkpCiAgICBleGNlcHQgKENvbm5lY3Rpb25FcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgQ29ubmVjdGlvbiBFcnJvciIlKFAsSyxQLEspKQojIER1bXAgQmVyYW5kYQpkZWYgX19fYmVyYW5kYV9fXygpOgogICAgZ2xvYmFsIF9fX2hlYWRlcl9fXyxzZXMKICAgIHRyeToKICAgICAgICBfX19oZWFkID0gX19faGVhZGVyX19fKCkKICAgICAgICBfX191c2VyX19fID0gaW5wdXQoIlxuJXNbJXM/JXNdJXMgVXNlciA6JXMgIiUoQixQLEIsUCxIKSkKICAgICAgICBpZiBfX191c2VyX19fIGluIFsnJywnICddOgogICAgICAgICAgICBleGl0KCIlc1slcyElc10lcyBEb24ndCBFbXB0eSIlKFAsTSxQLE0pKQogICAgICAgIF9fcmVzID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycrX19fdXNlcl9fXysnLz9fX2E9MScsIGhlYWRlcnM9X19faGVhZCkuanNvbigpWydncmFwaHFsJ11bJ3VzZXInXQogICAgICAgIF9fX25hbWEgPSBfX3Jlc1snZnVsbF9uYW1lJ10ucmVwbGFjZSgnICcsJ18nKSArICcudHh0JwogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBOYW1hIDolcyAlcyIlKEIsUCxCLFAsSCxfX3Jlc1snZnVsbF9uYW1lJ10pKQogICAgICAgIHByaW50KCIlcyAgICIlKFApKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgVXNlciBOb3QgRm91bmQiJShQLE0sUCxNKSkKICAgIHRyeToKICAgICAgICBfX3NlcCA9IHNlcy5nZXQoImh0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS9mZWVkL3JlZWxzX3RyYXkvIiwgaGVhZGVycz1fX19oZWFkKS5qc29uKCkKICAgICAgICBfX19maWxlID0gb3BlbignRHVtcC8nK19fX25hbWEsICd3JykKICAgICAgICBmb3IgeiBpbiBfX3NlcFsndHJheSddOgogICAgICAgICAgICBfX19maWxlLndyaXRlKHpbJ3VzZXInXVsndXNlcm5hbWUnXSsnPD0+Jyt6Wyd1c2VyJ11bJ2Z1bGxfbmFtZSddKycgIFxuJykKICAgICAgICAgICAgcHJpbnQoIlxyIit6Wyd1c2VyJ11bJ3VzZXJuYW1lJ10rIjw9PiIrelsndXNlciddWydmdWxsX25hbWUnXSkKICAgICAgICBfX19maWxlLmNsb3NlKCkKICAgICAgICBwcmludCgiXHIlcyAgICAgICAgICAgICAgICAgICAiJShQKSkKICAgICAgICBwcmludCgiJXNbJXMqJXNdJXMgRG9uZS4uLiIlKEgsUCxILFApKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBUb3RhbCBVc2VyIDolcyAlcyIlKEgsUCxILFAsSyxsZW4ob3BlbignRHVtcC8nK19fX25hbWEsJ3InKS5yZWFkbGluZXMoKSkpKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBGaWxlIFNhdmVkIEluIDolcyBEdW1wLyVzIiUoSCxQLEgsUCxLLF9fX25hbWEpKQogICAgICAgIGlucHV0KCIlc1slc0tlbWJhbGklc10iJShLLFAsSykpO19fX21lbnVfX18oKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgRHVtcCBGYWlsZWQiJShQLE0sUCxNKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBDb25uZWN0aW9uIEVycm9yIiUoUCxLLFAsSykpCiMgRHVtcCBIYXN0YWcKZGVmIF9fX2hhc3RhZ19fXygpOgogICAgZ2xvYmFsIF9fX2hlYWRlcl9fXyxzZXMKICAgIHRyeToKICAgICAgICBfX19oZWFkID0gX19faGVhZGVyX19fKCkKICAgICAgICBfX190YWdfX18gPSBpbnB1dCgiXG4lc1slcz8lc10lcyBIYXN0YWcgOiVzICIlKEIsUCxCLFAsSCkpLnJlcGxhY2UoJyMnLCcnKQogICAgICAgIF9fX25hbWEgPSBpbnB1dCgiJXNbJXM/JXNdJXMgRmlsZSA6JXMgIiUoQixQLEIsUCxIKSkKICAgICAgICBfX3NlcCA9IHNlcy5nZXQoJ2h0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS9mZWVkL3RhZy8nK19fX3RhZ19fXysnLz9yYW5rX3Rva2VuPWNhZjhkNjdhLTUxNDAtNGZjZC1hNzk1LWUyYTkwNDdkYzVkOScsIGhlYWRlcnM9X19faGVhZCkuanNvbigpCiAgICAgICAgX19fZmlsZSA9IG9wZW4oJ0R1bXAvJytfX19uYW1hLCAndycpCiAgICAgICAgcHJpbnQoIiVzICAgIiUoUCkpCiAgICAgICAgZm9yIHogaW4gX19zZXBbJ3JhbmtlZF9pdGVtcyddOgogICAgICAgICAgICBfX19maWxlLndyaXRlKHpbJ3VzZXInXVsndXNlcm5hbWUnXSsnPD0+Jyt6Wyd1c2VyJ11bJ2Z1bGxfbmFtZSddKycgIFxuJykKICAgICAgICAgICAgcHJpbnQoIlxyIit6Wyd1c2VyJ11bJ3VzZXJuYW1lJ10rIjw9PiIrelsndXNlciddWydmdWxsX25hbWUnXSkKICAgICAgICBfX19maWxlLmNsb3NlKCkKICAgICAgICBwcmludCgiXHIlcyAgICAgICAgICAgICAgICAgICAiJShQKSkKICAgICAgICBwcmludCgiJXNbJXMqJXNdJXMgRG9uZS4uLiIlKEgsUCxILFApKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBUb3RhbCBVc2VyIDolcyAlcyIlKEgsUCxILFAsSyxsZW4ob3BlbignRHVtcC8nK19fX25hbWEsJ3InKS5yZWFkbGluZXMoKSkpKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBGaWxlIFNhdmVkIEluIDolcyBEdW1wLyVzIiUoSCxQLEgsUCxLLF9fX25hbWEpKQogICAgICAgIGlucHV0KCIlc1slc0tlbWJhbGklc10iJShLLFAsSykpO19fX21lbnVfX18oKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgRHVtcCBGYWlsZWQiJShQLE0sUCxNKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBDb25uZWN0aW9uIEVycm9yIiUoUCxLLFAsSykpCiMgRHVtcCBTZWFyY2gKZGVmIF9fX3NlYXJjaF9fXygpOgogICAgZ2xvYmFsIF9fX2hlYWRlcl9fXyxzZXMKICAgIHRyeToKICAgICAgICBfX19oZWFkID0gX19faGVhZGVyX19fKCkKICAgICAgICBfX191c2VyX19fID0gaW5wdXQoIlxuJXNbJXM/JXNdJXMgVXNlciA6JXMgIiUoQixQLEIsUCxIKSkKICAgICAgICBpZiBfX191c2VyX19fIGluIFsnJywnICddOgogICAgICAgICAgICBleGl0KCIlc1slcyElc10lcyBEb24ndCBFbXB0eSIlKFAsTSxQLE0pKQogICAgICAgIF9fcmVzID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycrX19fdXNlcl9fXysnLz9fX2E9MScsIGhlYWRlcnM9X19faGVhZCkuanNvbigpWydncmFwaHFsJ11bJ3VzZXInXQogICAgICAgIF9fX25hbWEgPSBfX3Jlc1snZnVsbF9uYW1lJ10ucmVwbGFjZSgnICcsJ18nKSArICcudHh0JwogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBOYW1lIDolcyAlcyIlKEIsUCxCLFAsSCxfX3Jlc1snZnVsbF9uYW1lJ10pKQogICAgICAgIHByaW50KCIlcyAgICIlKFApKQogICAgICAgIF9fc2VwID0gc2VzLmdldCgnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2Zic2VhcmNoL2FjY291bnRzX3JlY3MvP3RhcmdldF91c2VyX2lkPScrX19yZXNbJ2lkJ10rJyZpbmNsdWRlX2ZyaWVuZHNoaXBfc3RhdHVzPXRydWUnLGhlYWRlcnM9X19faGVhZCkuanNvbigpCiAgICAgICAgX19fZmlsZSA9IG9wZW4oJ0R1bXAvJytfX19uYW1hLCAndycpCiAgICAgICAgZm9yIHogaW4gX19zZXBbJ3VzZXJzJ106CiAgICAgICAgICAgIF9fX2ZpbGUud3JpdGUoelsndXNlcm5hbWUnXSsnPD0+Jyt6WydmdWxsX25hbWUnXSsnICBcbicpCiAgICAgICAgICAgIHByaW50KCJcciIrelsndXNlcm5hbWUnXSsiPD0+Iit6WydmdWxsX25hbWUnXSkKICAgICAgICBfX19maWxlLmNsb3NlKCkKICAgICAgICBwcmludCgiXHIlcyAgICAgICAgICAgICAgICAgICAiJShQKSkKICAgICAgICBwcmludCgiJXNbJXMqJXNdJXMgRG9uZS4uLiIlKEgsUCxILFApKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBUb3RhbCBVc2VyIDolcyAlcyIlKEgsUCxILFAsSyxsZW4ob3BlbignRHVtcC8nK19fX25hbWEsJ3InKS5yZWFkbGluZXMoKSkpKQogICAgICAgIHByaW50KCIlc1slcz8lc10lcyBGaWxlIFNhdmVkIEluIDolcyBEdW1wLyVzIiUoSCxQLEgsUCxLLF9fX25hbWEpKQogICAgICAgIGlucHV0KCIlc1slc0tlbWJhbGklc10iJShLLFAsSykpO19fX21lbnVfX18oKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgRHVtcCBGYWlsZWQiJShQLE0sUCxNKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBLb25la3NpIEVycm9yIiUoUCxLLFAsSykpCiMgRHVtcCBRdWVyeQpkZWYgX19fcXVlcnlfX18oKToKICAgIGdsb2JhbCBfX19oZWFkZXJfX18sc2VzCiAgICB0cnk6CiAgICAgICAgX19faGVhZCA9IF9fX2hlYWRlcl9fXygpCiAgICAgICAgX19fbmFtYSA9IGlucHV0KCJcbiVzWyVzPyVzXSVzIFF1ZXJ5IDolcyAiJShCLFAsQixQLEgpKS5yZXBsYWNlKCcgJywnJykKICAgICAgICBfX19saW1pdF9fXyA9IGlucHV0KCIlc1slcz8lc10lcyBMaW1pdCA6JXMgIiUoQixQLEIsUCxIKSkKICAgICAgICBfX3NlcCA9IHNlcy5nZXQoJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vd2ViL3NlYXJjaC90b3BzZWFyY2gvP2NvbnRleHQ9YmxlbmRlZCZxdWVyeT0nK19fX25hbWErJyZyYW5rX3Rva2VuPTAuMzk1MzU5MjMxODI3MDg5MyZjb3VudD0nK19fX2xpbWl0X19fLCBoZWFkZXJzPV9fX2hlYWQpLmpzb24oKQogICAgICAgIF9fX2ZpbGUgPSBvcGVuKCdEdW1wLycrX19fbmFtYSsnLnR4dCcsICd3JykKICAgICAgICBwcmludCgiJXMgICAiJShQKSkKICAgICAgICBmb3IgeiBpbiBfX3NlcFsndXNlcnMnXToKICAgICAgICAgICAgX19fZmlsZS53cml0ZSh6Wyd1c2VyJ11bJ3VzZXJuYW1lJ10rJzw9PicrelsndXNlciddWydmdWxsX25hbWUnXSsnICBcbicpCiAgICAgICAgICAgIHByaW50KCJcciIrelsndXNlciddWyd1c2VybmFtZSddKyI8PT4iK3pbJ3VzZXInXVsnZnVsbF9uYW1lJ10pCiAgICAgICAgX19fZmlsZS5jbG9zZSgpCiAgICAgICAgcHJpbnQoIlxyJXMgICAgICAgICAgICAgICAgICAgIiUoUCkpCiAgICAgICAgcHJpbnQoIiVzWyVzKiVzXSVzIERvbmUuLi4iJShILFAsSCxQKSkKICAgICAgICBwcmludCgiJXNbJXM/JXNdJXMgVG90YWwgVXNlciA6JXMgJXMiJShILFAsSCxQLEssbGVuKG9wZW4oJ0R1bXAvJytfX19uYW1hKycudHh0JywncicpLnJlYWRsaW5lcygpKSkpCiAgICAgICAgcHJpbnQoIiVzWyVzPyVzXSVzIEZpbGUgU2F2ZWQgOiVzIER1bXAvJXMiJShILFAsSCxQLEssX19fbmFtYSsnLnR4dCcpKQogICAgICAgIGlucHV0KCIlc1slc0JhY2slc10iJShLLFAsSykpO19fX21lbnVfX18oKQogICAgZXhjZXB0IChLZXlFcnJvcik6CiAgICAgICAgZXhpdCgiJXNbJXMhJXNdJXMgRHVtcCBGYWlsZWQiJShQLE0sUCxNKSkKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBDb25uZWN0aW9uIEVycm9yIiUoUCxLLFAsSykpCiMgRHVtcCBFbWFpbApkZWYgX19fZW1haWxfX18oKToKICAgIHRyeToKICAgICAgICBfX191c2VyX19fID0gaW5wdXQoIlxuJXNbJXM/JXNdJXMgTmFtZSA6JXMgIiUoQixQLEIsUCxIKSkucmVwbGFjZSgnICcsJycpCiAgICAgICAgX19fbmFtYSA9IF9fX3VzZXJfX18rJy50eHQnCiAgICAgICAgX19fbGltaXRfX18gPSBpbnQoaW5wdXQoIiVzWyVzPyVzXSVzIExpbWl0IDolcyAiJShCLFAsQixQLEgpKSkKICAgICAgICBpZiBfX19saW1pdF9fXyA+PSAxMDAxOgogICAgICAgICAgICBleGl0KCIlc1slcyElc10lcyBNYXhpbXVtIDEwMDAiJShQLE0sUCxNKSkKICAgICAgICBfX19lbWFpbF9fXyA9IGlucHV0KCIlc1slcz8lc10lcyBEb21haW4gOiVzICIlKEIsUCxCLFAsSCkpCiAgICAgICAgcHJpbnQoIiVzICAgIiUoUCkpCiAgICAgICAgaWYgX19fZW1haWxfX18gaW4gWydAZ21haWwuY29tJywnQHlhaG9vLmNvbScsJ0Bob3RtYWlsLmNvbScsJ0BlbWFpbC5jb20nLCdAbWFpbC5jb20nLCdAb3V0bG9vay5jb20nLCdAeWFuZGV4LmNvbSddOgogICAgICAgICAgICBfX19maWxlID0gb3BlbignRHVtcC8nK19fX25hbWEsICd3JykKICAgICAgICAgICAgZm9yIHogaW4gcmFuZ2UoX19fbGltaXRfX18pOgogICAgICAgICAgICAgICAgX19fbm9tb3IgPSByYW5kb20ucmFuZGludCgxLCA5OTkpCiAgICAgICAgICAgICAgICBlbWFpbF9fXyA9IF9fX3VzZXJfX18rc3RyKF9fX25vbW9yKStfX19lbWFpbF9fXysnPD0+JytfX191c2VyX19fKycgJytzdHIoX19fbm9tb3IpKycgICcKICAgICAgICAgICAgICAgIF9fX2ZpbGUud3JpdGUoZW1haWxfX18rJ1xuJykKICAgICAgICAgICAgICAgIHByaW50KCdccicrZW1haWxfX18pCiAgICAgICAgICAgIF9fX2ZpbGUuY2xvc2UoKQogICAgICAgICAgICBwcmludCgiXHIlcyAgICAgICAgICAgICAgICAgICAiJShQKSkKICAgICAgICAgICAgcHJpbnQoIiVzWyVzKiVzXSVzIERvbmUuLi4iJShILFAsSCxQKSkKICAgICAgICAgICAgcHJpbnQoIiVzWyVzPyVzXSVzIFRvdGFsIFVzZXIgOiVzICVzIiUoSCxQLEgsUCxLLGxlbihvcGVuKCdEdW1wLycrX19fbmFtYSwncicpLnJlYWRsaW5lcygpKSkpCiAgICAgICAgICAgIHByaW50KCIlc1slcz8lc10lcyBGaWxlIFNhdmVkIDolcyBEdW1wLyVzIiUoSCxQLEgsUCxLLF9fX25hbWEpKQogICAgICAgICAgICBpbnB1dCgiJXNbJXNLZW1iYWxpJXNdIiUoSyxQLEspKTtfX19tZW51X19fKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBleGl0KCIlc1slcyElc10lcyBEb21haW4gOiBAZ21haWwuY29tLEB5YWhvby5jb20sQGhvdG1haWwuY29tLEBlbWFpbC5jb20sQG1haWwuY29tLEBvdXRsb2suY29tLEB5YW5kZXguY29tIiUoUCxNLFAsTSkpCiAgICBleGNlcHQgKEtleUVycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyBEdW1wIEZhaWxlZCIlKFAsTSxQLE0pKQojIFBpbGloIFBhc3N3b3JkCmRlZiBfX19wYXNzd29yZF9fXygpOgogICAgcHJpbnQoIlxuJXNbJXMxJXNdJXMuVXNlIFBhc3N3b3JkICVzeyVzTmFtZTEyMyxOYW1lMTIzNDUlc30iJShCLFAsQixQLEgsUCxIKSkKICAgIHByaW50KCIlc1slczIlc10lcyBVc2UgUGFzc3dvcmQgJXN7JXNOYW1lLE5hbWUxMjMsTmFtZTEyMzQ1JXN9IiUoQixQLEIsUCxILFAsSCkpCiAgICBwcmludCgiJXNbJXMzJXNdJXMgVXNlIFBhc3N3b3JkICVzeyVzTmFtZSxOYW1lMTIzLE5hbWUxMjM0LE5hbWUxMjM0NSxOYW1lMTIzNDU2JXN9IiUoQixQLEIsUCxILFAsSCkpCiAgICBwcmludCgiJXNbJXM0JXNdJXMgVXNlIE1hbnVhbCBQYXNzd29yZCAlc3slcz41JXN9IiUoQixQLEIsUCxILFAsSCkpCiAgICBfX19waWxpaF9fXyA9IGlucHV0KCJcbiVzWyVzPyVzXSVzIENob29zZSA6JXMgIiUoSCxQLEgsUCxLKSkKICAgIGlmIF9fX3BpbGloX19fIGluIFsnNCcsJzA0J106CiAgICAgICAgcHJpbnQoIiVzWyVzISVzXSVzIFVzZSAoLCkgRm9yIERpZmZlcmVudCBQYXNzd29yZCIlKE0sUCxNLFApKQogICAgICAgIHB3cyA9IGlucHV0KCIlc1slcz8lc10lcyBQYXNzd29yZCA6JXMgIiUoSCxQLEgsUCxLKSkuc3BsaXQoJywnKQogICAgICAgIGlmIHB3cyA8PTU6CiAgICAgICAgICAgIGV4aXQoIiVzWyVzISVzXSVzIFBhc3N3b3JkIE1vcmUgVGhhbiA2IENoYXJhY3RlcnMiJShQLE0sUCxNKSkKICAgIHRyeToKICAgICAgICBfX19maWxlX19fID0gaW5wdXQoIiVzWyVzPyVzXSVzIEZpbGUgRHVtcCA6JXMgIiUoSCxQLEgsUCxLKSkKICAgICAgICBfX19saXN0ID0gb3BlbihfX19maWxlX19fLCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQogICAgZXhjZXB0IChJT0Vycm9yKToKICAgICAgICBleGl0KCIlc1slcyElc10lcyAgRmlsZSBNaXNzaW5nIiUoUCxNLFAsTSkpCiAgICBwcmludCgiXG4lc1slc+KAoiVzXSVzIE9rIFJlc3VsdHMgU2F2ZWQgSW4gOiVzIFJlc3VsdHMvT2sudHh0IiUoQixQLEIsUCxIKSkKICAgIHByaW50KCIlc1slc+KAoiVzXSVzIENwIFJlc3VsdHMgU3RvcmVkIEluIDolcyBSZXN1bHRzL0NwLnR4dFxuIiUoQixQLEIsUCxLKSkKICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyAoaGF5dWspOgogICAgICAgIGZvciB2IGluIF9fX2xpc3Q6CiAgICAgICAgICAgIHVzZXIsIG5hbWUgPSB2LnNwbGl0KCc8PT4nKQogICAgICAgICAgICB6ID0gbmFtZS5zcGxpdCgnICcpCiAgICAgICAgICAgIGlmIF9fX3BpbGloX19fIGluIFsnMScsJzAxJ106CiAgICAgICAgICAgICAgICBwd3ggPSBbelswXSsnMTIzJywgelswXSsnMTIzNDUnLCB6WzFdKycxMjMnLCB6WzFdKycxMjM0NSddCiAgICAgICAgICAgIGVsaWYgX19fcGlsaWhfX18gaW4gWycyJywnMDInXToKICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLnJlcGxhY2UoJyAnLCcnKSwgelswXSsnMTIzJywgelswXSsnMTIzNDUnLCB6WzFdKycxMjMnLCB6WzFdKycxMjM0NSddCiAgICAgICAgICAgIGVsaWYgX19fcGlsaWhfX18gaW4gWyczJywnMDMnXToKICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLnJlcGxhY2UoJyAnLCcnKSwgelswXSsnMTIzJywgelswXSsnMTIzNCcsIHpbMF0rJzEyMzQ1JywgelswXSsnMTIzNDU2JywgelsxXSsnMTIzJywgelsxXSsnMTIzNCcsIHpbMV0rJzEyMzQ1JywgelsxXSsnMTIzNDU2J10KICAgICAgICAgICAgZWxpZiBfX19waWxpaF9fXyBpbiBbJzQnLCcwNCddOgogICAgICAgICAgICAgICAgcHd4ID0gcHdzCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZS5yZXBsYWNlKCcgJywnJyksIHpbMF0rJzEyMycsIHpbMF0rJzEyMzQ1JywgelsxXSsnMTIzJywgelsxXSsnMTIzNDUnXQogICAgICAgICAgICBoYXl1ay5zdWJtaXQoX19fY3JhY2tfX18sIF9fX2xpc3QsIHVzZXIsIHB3eCkKICAgIGV4aXQoIlxyJXNbJXNTZWxlc2FpJXNdJXMgICAgICAgICAgICAgICAgICAgICAgICAiJShILFAsSCxQKSkKIyBDcmFjayBJbnN0YWdyYW0KZGVmIF9fX2NyYWNrX19fKHRvdGFsLHVzZXIscHd4KToKICAgIGdsb2JhbCBsb29wLCBzZXMsIG9rLCBjcAogICAgdHJ5OgogICAgICAgIHVhID0gcmFuZG9tLmNob2ljZShvcGVuKCJEYXRhL3VhLnR4dCIsInIiKS5yZWFkKCkuc3BsaXRsaW5lcygpKQogICAgZXhjZXB0IChJT0Vycm9yKToKICAgICAgICB1YSA9ICgnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNDEuMC4yMjI3LjAgU2FmYXJpLzUzNy4zNicpCiAgICBzeXMuc3Rkb3V0LndyaXRlKAogICAgICAgICJcclx4MWJbMTs5N21bQ3JhY2tdICVzLyVzIE9rOi0lcyAtIENwOi0lcyAgICAgIiUobG9vcCwgbGVuKHRvdGFsKSwgbGVuKG9rKSwgbGVuKGNwKSkKICAgICk7IHN5cy5zdGRvdXQuZmx1c2goKQogICAgdHJ5OgogICAgICAgIGZvciBwdyBpbiBwd3g6CiAgICAgICAgICAgIHB3ID0gcHcubG93ZXIoKQogICAgICAgICAgICBfX19oZWFkID17J3VzZXItYWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBIRDE5MDcgQnVpbGQvUUtRMS4xOTA3MTYuMDAzOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzc4LjAuMzkwNC45NiBNb2JpbGUgU2FmYXJpLzUzNy4zNiBJbnN0YWdyYW0gMTE5LjAuMC4zMy4xNDcgQW5kcm9pZCAoMjkvMTA7IDQyMGRwaTsgMTA4MHgyMjkxOyBPbmVQbHVzOyBIRDE5MDc7IE9uZVBsdXM3VFRNTzsgcWNvbTsgZW5fVVM7IDE4Mjc0NzM5NyknLCdjb29raWUnOiBvcGVuKCdrdWtpLnR4dCcsJ3InKS5yZWFkKCl9CiAgICAgICAgICAgIHByb3h5ID0gcmFuZG9tLmNob2ljZShvcGVuKCJEYXRhL3Byb3h5LnR4dCIsInIiKS5yZWFkKCkuc3BsaXRsaW5lcygpKQogICAgICAgICAgICBoZWFkZXIgPSB7CiAgICAgICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOCcsCiAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywKICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6ICcwJywKICAgICAgICAgICAgICAgICdIb3N0JzogJ3d3dy5pbnN0YWdyYW0uY29tJywKICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vJywKICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogdWEsCiAgICAgICAgICAgICAgICAnWC1JbnN0YWdyYW0tQUpBWCc6ICcxJywKICAgICAgICAgICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBzZXMuaGVhZGVycy51cGRhdGUoaGVhZGVyKQogICAgICAgICAgICBzZXMuY29va2llcy51cGRhdGUoewogICAgICAgICAgICAgICAgJ3Nlc3Npb25pZCc6ICcnLCAnbWlkJzogJycsICdpZ19wcic6ICcxJywKICAgICAgICAgICAgICAgICdpZ192dyc6ICcxOTIwJywgJ2NzcmZ0b2tlbic6ICcnLAogICAgICAgICAgICAgICAgJ3NfbmV0d29yayc6ICcnLCAnZHNfdXNlcl9pZCc6ICcnCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICBzZXMuZ2V0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3dlYi9fX21pZCcpCiAgICAgICAgICAgIHNlcy5oZWFkZXJzLnVwZGF0ZSh7J1gtQ1NSRlRva2VuJzogc2VzLmNvb2tpZXMuZ2V0X2RpY3QoKVsnY3NyZnRva2VuJ119KQogICAgICAgICAgICBlbmNfcGFzcyA9ICcjUFdEX0lOU1RBR1JBTV9CUk9XU0VSOjA6e306e30nLmZvcm1hdChpbnQodGltZS50aW1lKCkpLCBwdykKICAgICAgICAgICAgZGF0YV9wb3N0ID0gewogICAgICAgICAgICAgICAgInVzZXJuYW1lIjogdXNlciwKICAgICAgICAgICAgICAgICJlbmNfcGFzc3dvcmQiOiBlbmNfcGFzcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICByZXEgPSBzZXMucG9zdCgiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9hY2NvdW50cy9sb2dpbi9hamF4LyIsIGhlYWRlcnM9aGVhZGVyLCBkYXRhPWRhdGFfcG9zdCwgcHJveGllcz17J2h0dHAnOiBmJ3NvY2tzNDovL3twcm94eX0nfSwgYWxsb3dfcmVkaXJlY3RzPVRydWUpLmpzb24oKQogICAgICAgICAgICBpZiAndXNlcklkJyBpbiBzdHIocmVxKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBfX3ZveCA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nK3VzZXIrJy8/X19hPTEnLCBoZWFkZXJzPV9fX2hlYWQpLmpzb24oKVsnZ3JhcGhxbCddWyd1c2VyJ10KICAgICAgICAgICAgICAgICAgICBubSA9IF9fdm94WydmdWxsX25hbWUnXQogICAgICAgICAgICAgICAgICAgIG1rID0gX192b3hbJ2VkZ2VfZm9sbG93ZWRfYnknXVsnY291bnQnXQogICAgICAgICAgICAgICAgZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgbm0gPSAnIC0nCiAgICAgICAgICAgICAgICAgICAgbWsgPSAnIC0nCiAgICAgICAgICAgICAgICBleGNlcHQ6cGFzcwogICAgICAgICAgICAgICAgcHJpbnQoIlxyJXNbJXPinJQlc10lcyBTdGF0dXMgOiVzIFN1Y2Nlc3MgICAgICAgICAgICAgICAiJShCLEgsQixQLEgpKQogICAgICAgICAgICAgICAgcHJpbnQoIiVzWz5dIE5hbWUgOiAlcyIlKFAsbm0pKQogICAgICAgICAgICAgICAgcHJpbnQoIiVzWz5dIEZvbGxvd2VycyA6ICVzIiUoUCxtaykpCiAgICAgICAgICAgICAgICBwcmludCgiJXNbPl0gVXNlcm5hbWUgOiAlcyIlKFAsdXNlcikpCiAgICAgICAgICAgICAgICBwcmludCgiJXNbPl0gUGFzc3dvcmQgOiAlc1xuIiUoUCxwdykpCiAgICAgICAgICAgICAgICBvay5hcHBlbmQoIiVzfCVzIiUodXNlcixwdykpCiAgICAgICAgICAgICAgICBvcGVuKCdSZXN1bHRzL09rLnR4dCcsJ2EnKS53cml0ZSgiJXN8JXNcbiIlKHVzZXIscHcpKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIHN0cihyZXEpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIF9fdm94ID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLycrdXNlcisnLz9fX2E9MScsIGhlYWRlcnM9X19faGVhZCkuanNvbigpWydncmFwaHFsJ11bJ3VzZXInXQogICAgICAgICAgICAgICAgICAgIG5tID0gX192b3hbJ2Z1bGxfbmFtZSddCiAgICAgICAgICAgICAgICAgICAgbWsgPSBfX3ZveFsnZWRnZV9mb2xsb3dlZF9ieSddWydjb3VudCddCiAgICAgICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToKICAgICAgICAgICAgICAgICAgICBubSA9ICcgLScKICAgICAgICAgICAgICAgICAgICBtayA9ICcgLScKICAgICAgICAgICAgICAgIGV4Y2VwdDpwYXNzCiAgICAgICAgICAgICAgICBwcmludCgiXHIlc1slc+KcmCVzXSVzIFN0YXR1cyA6JXMgQ2hlY2twb2ludCAgICAgICAgICAgICAgICIlKEIsSyxCLFAsSykpCiAgICAgICAgICAgICAgICBwcmludCgiJXNbPl0gTmFtZSA6ICVzIiUoUCxubSkpCiAgICAgICAgICAgICAgICBwcmludCgiJXNbPl0gRm9sbG93ZXJzIDogJXMiJShQLG1rKSkKICAgICAgICAgICAgICAgIHByaW50KCIlc1s+XSBVc2VybmFtZSA6ICVzIiUoUCx1c2VyKSkKICAgICAgICAgICAgICAgIHByaW50KCIlc1s+XSBQYXNzd29yZCA6ICVzXG4iJShQLHB3KSkKICAgICAgICAgICAgICAgIGNwLmFwcGVuZCgiJXN8JXMiJSh1c2VyLHB3KSkKICAgICAgICAgICAgICAgIG9wZW4oJ1Jlc3VsdHMvQ3AudHh0JywnYScpLndyaXRlKCIlc3wlc1xuIiUodXNlcixwdykpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZWxpZiAnUGxlYXNlIHdhaXQnIGluIHN0cihyZXEpOgogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgKICAgICAgICAgICAgICAgICAgICAiXHIlc1slcyElc10lcyBHdW5ha2FuIE1vZGUgUGVzYXdhdCAyIERldGlrIiUoUCxNLFAsTSkpLAogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpO3NsZWVwKDcpCiAgICAgICAgICAgICAgICBfX19jcmFja19fXyh0b3RhbCx1c2VyLHB3eCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgbG9vcCArPTEKICAgIGV4Y2VwdCAoQ29ubmVjdGlvbkVycm9yKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKAogICAgICAgICAgICAiXHIlc1slcyElc10lcyBLb25la3NpIEVycm9yICAgICAgICAgICAgICAgICIlKFAsSyxQLEspKSwKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCk7c2xlZXAoNSkKICAgICAgICBfX19jcmFja19fXyh0b3RhbCx1c2VyLHB3eCkKCmlmIF9fbmFtZV9fPT0nX19tYWluX18nOgogICAgb3Muc3lzdGVtKCdnaXQgcHVsbCcpCiAgICBfX19tZW51X19fKCkK'))
